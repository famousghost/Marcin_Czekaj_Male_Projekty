#include "Window.h"
#include "ShaderPrograms.h"
#include <iostream>


const GLchar * VLSL = "#version 330 core\n"

"layout(location = 0) in vec3 position;\n"

"void main()\n"
"{\n"
"gl_Position = vec4(position.x, position.y, position.z, 1.0f);\n"
"}\0";


const GLchar * FLSL = "#version 330 core\n"

"out vec4 color;\n"

"void main()\n"
"{\n"
"color = vec4(1.0f,0.5f,0.2f,1.0f);\n"
"}\0";

const GLchar * FLSL2 = "#version 330 core\n"

"out vec4 color;\n"

"void main()\n"
"{\n"
"color = vec4(1.0f,1.0f,0.0f,1.0f);\n"
"}\0";


int main()
{
	Window * window = new Window(800, 600, "Hello Triangle");




	GLuint vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &VLSL, NULL);
	glCompileShader(vertexShader);

	GLint success;
	GLchar error[512];

	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);

	if (!success)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, error);
	    std::cerr << "nie udalo sie zkompilowac shadera" << error << std::endl;
	}

	GLuint fragmentShader;
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &FLSL, NULL);
	glCompileShader(fragmentShader);


	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);

	if (!success)
	{
		glGetShaderInfoLog(fragmentShader, 512, NULL, error);
		std::cerr << "nie udalo sie zkompilowac shadera"<<error << std::endl;
	}

	GLuint framgentShader2;
	framgentShader2 = glCreateShader(GL_FRAGMENT_SHADER);

	glShaderSource(framgentShader2, 1, &FLSL2, NULL);
	glCompileShader(framgentShader2);

	glGetShaderiv(framgentShader2, GL_COMPILE_STATUS, &success);

		if (!success)
		{
			glGetShaderInfoLog(framgentShader2, 512, NULL, error);
			std::cerr << "nie udalo sie zkompilowac shadera" << error << std::endl;
	}

	GLuint shaderProgram;
	GLuint shaderProgram2;
	shaderProgram = glCreateProgram();
	shaderProgram2 = glCreateProgram();

	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	glAttachShader(shaderProgram2, vertexShader);
	glAttachShader(shaderProgram2, framgentShader2);
	glLinkProgram(shaderProgram2);

	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(shaderProgram, 512, NULL, error);
		std::cerr << "nie udalo sie zlinkowac programu" << std::endl;
	}

	glGetProgramiv(shaderProgram2, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(shaderProgram2, 512, NULL, error);
		std::cerr << "nie udalo sie zlinkowac programu" << std::endl;
	}


	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);
	glDeleteShader(framgentShader2);


	//Exercise 1
	/*
	GLfloat verticies[]
	{
		//First Triangle
		0.5f,0.0f,0.0f,
		0.0f,0.2f,0.0f,
		-0.5f,0.0f,0.0f,
		//Second Triangle
		0.5f,0.0f,0.0f,
		0.0f,-0.2f,0.0f,
		-0.5f,0.0f,0.0f

	};
	*/
	//Exerscise 2

	GLfloat verticies[]
	{
		//First Triangle
		0.5f,0.0f,0.0f,
		0.0f,0.2f,0.0f,
		-0.5f,0.0f,0.0f
	};

	GLfloat verticies2[]
	{
		//Second Triangle
		0.5f,0.0f,0.0f,
		0.0f,-0.2f,0.0f,
		-0.5f,0.0f,0.0f

	};

	GLuint indicies[]
	{
		0,1,3,
		1,2,3
	};

	GLuint VAO;
	GLuint VAO2;
	glGenVertexArrays(1, &VAO);
	glGenVertexArrays(1, &VAO2);



	GLuint VBO;
	GLuint VBO2;

	//GLuint EBO;

	//glGenBuffers(1, &EBO);

	glBindVertexArray(VAO);

	glGenBuffers(1, &VBO);


	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	

	glBufferData(GL_ARRAY_BUFFER, sizeof(verticies), verticies, GL_STATIC_DRAW);


	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
	glEnableVertexAttribArray(0);

	glBindVertexArray(0);


	//Exercise 2
	glBindVertexArray(VAO2);

	glGenBuffers(1, &VBO2);

	glBindBuffer(GL_ARRAY_BUFFER, VBO2);

	glBufferData(GL_ARRAY_BUFFER, sizeof(verticies2), verticies2, GL_STATIC_DRAW);
	//glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indicies), indicies, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
	glEnableVertexAttribArray(0);

	glBindVertexArray(0);


	
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);


	while (window->CheckWindowClose())
	{
		glfwPollEvents();
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);
		//glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glUseProgram(shaderProgram2);
		glBindVertexArray(VAO2);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glBindVertexArray(0);
		glfwSwapBuffers(window->getWindow());
	}

	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &VAO2);
	glDeleteBuffers(1, &VBO2);




	return 0;
}